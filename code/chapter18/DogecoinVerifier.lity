pragma lity ^1.2.4;

contract DogecoinVerifier {

  struct DogecoinBlockHeader {
    uint version;
    string prev_block;
    string merkle_root;
    uint timestamp;
    string bits;
    uint nonce;
  }

  function verifyBlock(uint version, string prev_block, string merkle_root, uint timestamp, string bits, uint nonce) pure public returns (bool) {
    DogecoinBlockHeader memory block_header = DogecoinBlockHeader(version, prev_block, merkle_root, timestamp, bits, nonce);
    string memory block_header_hex = generateBlockHeader(block_header);
    string memory pow_hash = reverseHex(eni("scrypt", block_header_hex));
    uint256 target = bitsToTarget(bits);
    if (hexToUint(pow_hash) > target) {
      return false;
    }
    return true;
  }

  function generateBlockHeader(DogecoinBlockHeader header) pure internal returns (string) {
    bytes memory block_header = new bytes(160);
    bytes memory version_hex = bytes(reverseHex(uintToHex(header.version, 8)));
    bytes memory prev_block_hex = bytes(reverseHex(header.prev_block));
    bytes memory merkle_root_hex = bytes(reverseHex(header.merkle_root));
    bytes memory timestamp_hex = bytes(reverseHex(uintToHex(header.timestamp, 8)));
    bytes memory bits_hex = bytes(reverseHex(header.bits));
    bytes memory nonce_hex = bytes(reverseHex(uintToHex(header.nonce, 8)));
    uint i;
    uint index = 0;
    for (i = 0; i < version_hex.length; i++) { block_header[index++] = version_hex[i]; }
    for (i = 0; i < prev_block_hex.length; i++) { block_header[index++] = prev_block_hex[i]; }
    for (i = 0; i < merkle_root_hex.length; i++) { block_header[index++] = merkle_root_hex[i]; }
    for (i = 0; i < timestamp_hex.length; i++) { block_header[index++] = timestamp_hex[i]; }
    for (i = 0; i < bits_hex.length; i++) { block_header[index++] = bits_hex[i]; }
    for (i = 0; i < nonce_hex.length; i++) { block_header[index++] = nonce_hex[i]; }
    return string(block_header);
  }

  function bitsToTarget(string bits) pure internal returns (uint) {
    uint bits_uint32 = hexToUint(bits);
    uint p = (bits_uint32 & 0xff000000) >> 24;
    p = (p - 3) * 8;
    uint result = (bits_uint32 & 0xffffff) << p;
    return result;
  }

  function reverseHex(string hex_string) pure internal returns (string) {
    bytes memory hex_bytes = bytes(hex_string);
    assert(hex_bytes.length % 2 == 0);

    bytes memory outpute_bytes = new bytes(hex_bytes.length);
    for (uint i = 0; i < hex_bytes.length; i += 2) {
      outpute_bytes[i]     = hex_bytes[hex_bytes.length - i - 2];
      outpute_bytes[i + 1] = hex_bytes[hex_bytes.length - i - 1];
    }

    return string(outpute_bytes);
  }

  function hexToUint(string hex_string) pure internal returns (uint256) {
    bytes memory hex_bytes = bytes(hex_string);
    uint i;
    uint256 result = 0;
    for (i = 0; i < hex_bytes.length; i++) {
      result <<= 4;
      if (uint8(hex_bytes[i]) >= uint8(byte('0')) && uint8(hex_bytes[i]) <= uint8(byte('9'))) {
        result += uint8(hex_bytes[i]) - uint8(byte('0'));
      } else {
        result += uint8(hex_bytes[i]) - uint8(byte('a')) + 10;
      }
    }

    return result;
  }

  function uintToHex(uint256 a, uint8 length) pure internal returns (string) {
    uint i;
    bytes memory hex_bytes = new bytes(64);
    for (i = 0; i < 64; i++) {
      byte last_half_byte = byte(a & 0xf);
      if (last_half_byte >= 0 && last_half_byte <= 9) {
        hex_bytes[63 - i] = byte(uint8(byte('0')) + uint8(last_half_byte));
      } else {
        hex_bytes[63 - i] = byte(uint8(byte('a')) + uint8(last_half_byte) - 10);
      }
      a >>= 4;
    }

    bytes memory output_bytes = new bytes(length);
    for (i = 0; i < length; i++) {
      output_bytes[i] = hex_bytes[64 - length + i];
    }
    return string(output_bytes);
  }
}
